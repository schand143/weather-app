{"version":3,"sources":["Components/Titles.js","Components/Form.js","Components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","Components_Titles","Components_Form","this","Components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb192991.chunk.js","sourcesContent":["import React from \"react\" ;\r\n\r\nconst Titles = () => (\r\n\r\n\t<div>\r\n\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\r\n\t\t<h3 className=\"title-container__subtitle\">Find out tempreture , conditions and more..</h3>\r\n\t\t</div>\r\n\r\n\t);\r\nexport default Titles;"," import React from \"react\";\r\n\r\n const Form = props => (\r\n\r\n \t<form onSubmit={props.getWeather}>\r\n \t\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n \t\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n \t\t\t<button> Get Weather </button>\r\n \t\t\t</form>\r\n \t);\r\n\r\n export default Form;","  import React from \"react\";\r\n\r\n  const Weather = props => (\r\n \t\r\n \t\t<div className=\"weather__info\">\r\n \t\t{ \r\n \t\t\tprops.city && props.country && <p className=\"weather__key\">Location: \r\n \t\t\t<spam className=\"weather__value\">  {props.city} , {props.country}</spam>\r\n \t\t\t</p> \r\n \t\t}\t\r\n \t\t{ \r\n \t\t\tprops.temperature && <p className=\"weather__key\">Temperature: \r\n \t\t\t<spam className=\"weather__value\">  {props.temperature}</spam>\r\n \t\t\t</p> \r\n \t\t}\r\n\t\t{ \r\n\t\t\tprops.humidity && <p className=\"weather__key\">Humidity: \r\n\t\t\t<spam className=\"weather__value\">  {props.humidity}</spam>\r\n\t\t\t</p>\r\n\t\t}\r\n \t\t{ \r\n \t\t\tprops.description && <p className=\"weather__key\">Condition:\r\n \t\t\t <spam className=\"weather__value\">  {props.description}</spam>\r\n \t\t\t </p>\r\n \t\t}\r\n \t\t{ \r\n \t\t\tprops.error && <p className=\"weather__error\"> { props.error }</p>\r\n \t\t}\r\n \t\t</div>\r\n \t\t);\r\n\r\n export default Weather;","import React from \"react\";\r\n\r\nimport Titles from \"./Components/Titles\";\r\nimport Form from \"./Components/Form\";\r\nimport Weather from \"./Components/Weather\";\r\n\r\nconst API_KEY = \"40e0c6de0da866696c29c632cf67aeb9\";\r\n\r\nclass App extends React.Component {\r\n\tstate = {\r\n\t\ttemperature: undefined,\r\n\t\tcity: undefined,\r\n\t\tcountry: undefined,\r\n\t\thumidity: undefined,\r\n\t\tdescription: undefined,\r\n\t\terror: undefined\r\n\t\t//src : \"\"\r\n\t}\r\n\tgetWeather = async (e) => {\r\n\t\te.preventDefault();\t\r\n\t\tconst city = e.target.elements.city.value;\r\n\t\tconst country = e.target.elements.country.value;\r\n\t\tconst api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\r\n\t\tconst data = await api_call.json();\r\n\r\n\t\tif(city && country) {\r\n\r\n\t\tthis.setState({\r\n\t\t\ttemperature: data.main.temp,\r\n\t\t\tcity: data.name,\r\n\t\t\tcountry: data.sys.country,\r\n\t\t\thumidity: data.main.humidity,\r\n\t\t\tdescription: data.weather[0].description,\r\n\t\t\terror: \"\"\r\n\t\t});\r\n\t} else {\r\n\t\tthis.setState({\r\n\t\t\ttemperature: undefined,\r\n\t\t\tcity: undefined,\r\n\t\t\tcountry: undefined,\r\n\t\t\thumidity: undefined,\r\n\t\t\tdescription: undefined,\r\n\t\t\terror: \"Please enter the values...\"\r\n\t\t});\r\n\t}\r\n\r\n}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t\t<div className=\"main\">\r\n\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t<div className=\"col-xs-5 title-container\">\r\n\t\t\t\t\t\t\t\t\t<Titles/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-xs-7 form-container\">\r\n\t\t\t\t\t<Form getWeather={this.getWeather}/>\r\n\t\t\t\t\t<Weather\r\n\t\t\t\t\ttemperature={this.state.temperature}\r\n\t\t\t\t\thumidity={this.state.humidity}\r\n\t\t\t\t\tcity={this.state.city}\r\n\t\t\t\t\tcountry={this.state.country}\r\n\t\t\t\t\tdescription={this.state.description}\r\n\t\t\t\t\terror={this.state.error}\r\n\t\t\t\t\t/>\t\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\t\t\t\r\n\t\t\t </div>\r\n\t\t);\r\n\t}\r\n};\r\n\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./App.css\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}